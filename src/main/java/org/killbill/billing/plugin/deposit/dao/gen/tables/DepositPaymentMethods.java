/*
 * This file is generated by jOOQ.
 */
package org.killbill.billing.plugin.deposit.dao.gen.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;
import org.killbill.billing.plugin.deposit.dao.gen.Indexes;
import org.killbill.billing.plugin.deposit.dao.gen.Keys;
import org.killbill.billing.plugin.deposit.dao.gen.Killbill;
import org.killbill.billing.plugin.deposit.dao.gen.tables.records.DepositPaymentMethodsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DepositPaymentMethods extends TableImpl<DepositPaymentMethodsRecord> {

    private static final long serialVersionUID = 324917276;

    /**
     * The reference instance of <code>killbill.deposit_payment_methods</code>
     */
    public static final DepositPaymentMethods DEPOSIT_PAYMENT_METHODS = new DepositPaymentMethods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepositPaymentMethodsRecord> getRecordType() {
        return DepositPaymentMethodsRecord.class;
    }

    /**
     * The column <code>killbill.deposit_payment_methods.record_id</code>.
     */
    public final TableField<DepositPaymentMethodsRecord, ULong> RECORD_ID = createField(DSL.name("record_id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>killbill.deposit_payment_methods.kb_account_id</code>.
     */
    public final TableField<DepositPaymentMethodsRecord, String> KB_ACCOUNT_ID = createField(DSL.name("kb_account_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>killbill.deposit_payment_methods.kb_payment_method_id</code>.
     */
    public final TableField<DepositPaymentMethodsRecord, String> KB_PAYMENT_METHOD_ID = createField(DSL.name("kb_payment_method_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>killbill.deposit_payment_methods.is_default</code>.
     */
    public final TableField<DepositPaymentMethodsRecord, Short> IS_DEFAULT = createField(DSL.name("is_default"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>killbill.deposit_payment_methods.is_deleted</code>.
     */
    public final TableField<DepositPaymentMethodsRecord, Short> IS_DELETED = createField(DSL.name("is_deleted"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>killbill.deposit_payment_methods.additional_data</code>.
     */
    public final TableField<DepositPaymentMethodsRecord, String> ADDITIONAL_DATA = createField(DSL.name("additional_data"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>killbill.deposit_payment_methods.created_date</code>.
     */
    public final TableField<DepositPaymentMethodsRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>killbill.deposit_payment_methods.updated_date</code>.
     */
    public final TableField<DepositPaymentMethodsRecord, LocalDateTime> UPDATED_DATE = createField(DSL.name("updated_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>killbill.deposit_payment_methods.kb_tenant_id</code>.
     */
    public final TableField<DepositPaymentMethodsRecord, String> KB_TENANT_ID = createField(DSL.name("kb_tenant_id"), org.jooq.impl.SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * Create a <code>killbill.deposit_payment_methods</code> table reference
     */
    public DepositPaymentMethods() {
        this(DSL.name("deposit_payment_methods"), null);
    }

    /**
     * Create an aliased <code>killbill.deposit_payment_methods</code> table reference
     */
    public DepositPaymentMethods(String alias) {
        this(DSL.name(alias), DEPOSIT_PAYMENT_METHODS);
    }

    /**
     * Create an aliased <code>killbill.deposit_payment_methods</code> table reference
     */
    public DepositPaymentMethods(Name alias) {
        this(alias, DEPOSIT_PAYMENT_METHODS);
    }

    private DepositPaymentMethods(Name alias, Table<DepositPaymentMethodsRecord> aliased) {
        this(alias, aliased, null);
    }

    private DepositPaymentMethods(Name alias, Table<DepositPaymentMethodsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DepositPaymentMethods(Table<O> child, ForeignKey<O, DepositPaymentMethodsRecord> key) {
        super(child, key, DEPOSIT_PAYMENT_METHODS);
    }

    @Override
    public Schema getSchema() {
        return Killbill.KILLBILL;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEPOSIT_PAYMENT_METHODS_DEPOSIT_PAYMENT_METHODS_KB_PAYMENT_ID);
    }

    @Override
    public Identity<DepositPaymentMethodsRecord, ULong> getIdentity() {
        return Keys.IDENTITY_DEPOSIT_PAYMENT_METHODS;
    }

    @Override
    public UniqueKey<DepositPaymentMethodsRecord> getPrimaryKey() {
        return Keys.KEY_DEPOSIT_PAYMENT_METHODS_PRIMARY;
    }

    @Override
    public List<UniqueKey<DepositPaymentMethodsRecord>> getKeys() {
        return Arrays.<UniqueKey<DepositPaymentMethodsRecord>>asList(Keys.KEY_DEPOSIT_PAYMENT_METHODS_PRIMARY, Keys.KEY_DEPOSIT_PAYMENT_METHODS_RECORD_ID, Keys.KEY_DEPOSIT_PAYMENT_METHODS_DEPOSIT_PAYMENT_METHODS_KB_PAYMENT_ID);
    }

    @Override
    public DepositPaymentMethods as(String alias) {
        return new DepositPaymentMethods(DSL.name(alias), this);
    }

    @Override
    public DepositPaymentMethods as(Name alias) {
        return new DepositPaymentMethods(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DepositPaymentMethods rename(String name) {
        return new DepositPaymentMethods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DepositPaymentMethods rename(Name name) {
        return new DepositPaymentMethods(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<ULong, String, String, Short, Short, String, LocalDateTime, LocalDateTime, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
